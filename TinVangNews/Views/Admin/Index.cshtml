@model TinVangNews.ViewModels.Admin.DashboardViewModel

@{
    ViewData["Title"] = "Bảng điều khiển Quản trị";
}

<header class="main-content-header mb-4">
    <h2 class="border-bottom pb-2">@ViewData["Title"]</h2>
</header>

<div class="row g-4 mb-4">
    <div class="col-md-4">
        <div class="card text-white bg-primary h-100">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                  
                    <div id="totalUsersStat" class="fs-1 fw-bold">@Model.TotalUsers</div>
                    <div class="fs-6">Tổng số Người dùng</div>
                </div>
                <i class="bi bi-people-fill" style="font-size: 4rem; opacity: 0.3;"></i>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-danger h-100">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                  
                    <div id="totalAdminsStat" class="fs-1 fw-bold">@Model.TotalAdmins</div>
                    <div class="fs-6">Quản trị viên</div>
                </div>
                <i class="bi bi-shield-lock-fill" style="font-size: 4rem; opacity: 0.3;"></i>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-success h-100">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                  
                    <div id="totalFavoritesStat" class="fs-1 fw-bold">@Model.TotalFavoriteArticles</div>
                    <div class="fs-6">Bài viết đã lưu</div>
                </div>
                <i class="bi bi-bookmark-star-fill" style="font-size: 4rem; opacity: 0.3;"></i>
            </div>
        </div>
    </div>
</div>

<div class="row g-4">

    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <i class="bi bi-person-plus-fill me-2"></i>Người dùng mới nhất
            </div>
            <div class="card-body">
                @if (Model.LatestUsers.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var user in Model.LatestUsers)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @user.Email
                                <span class="badge bg-light text-dark">Mới</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">Chưa có người dùng nào.</p>
                }
            </div>
            <div class="card-footer text-center">
                <a asp-action="ManageUsers" class="btn btn-primary w-100">
                    <i class="bi bi-people me-2"></i>Quản lý tất cả người dùng
                </a>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <i class="bi bi-graph-up me-2"></i>Biểu đồ (Tương lai)
            </div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <p class="text-muted">Khu vực này có thể được sử dụng để hiển thị các biểu đồ về hoạt động của người dùng trong tương lai.</p>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js" 
    integrity="sha512-
    jI/CR+4IZ1g35D2N5yEMn6C9s9e/9yOAbSflIKk93Y4hE0LpQDII4L5KJW25i2JAZ2K5/YcVvIwYJg9YF2l5cw==" 
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
    
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/dashboardHub") 
                .configureLogging(signalR.LogLevel.Information) 
                .build();
            async function updateDashboardStats() {
                try {
                    console.log("Fetching new stats from server...");
                    const response = await fetch('/Admin/GetDashboardStats');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const stats = await response.json();
                    updateStat('totalUsersStat', stats.totalUsers);
                    updateStat('totalAdminsStat', stats.totalAdmins);
                    updateStat('totalFavoritesStat', stats.totalFavoriteArticles);

                    console.log("Dashboard updated successfully!", stats);
                } catch (err) {
                    console.error("Failed to update dashboard stats:", err);
                }
            }
            function updateStat(elementId, newValue) {
                const element = document.getElementById(elementId);

                if (element && element.innerText !== newValue.toString()) {
                    element.style.transition = 'opacity 0.2s ease-out, transform 0.2s ease-out';
                    element.style.opacity = 0;
                    element.style.transform = 'translateY(10px)';
                    setTimeout(() => {
                        element.innerText = newValue;
                        element.style.opacity = 1;
                        element.style.transform = 'translateY(0px)';
                    }, 200);
                }
            }
            connection.on("UpdateDashboardStats", function () {
                console.log("Received 'UpdateDashboardStats' signal from server.");
                updateDashboardStats();
            });
            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected to DashboardHub.");
                } catch (err) {
                    console.error("SignalR Connection Error: ", err);
                    setTimeout(start, 5000); 
                }
            };

            connection.onclose(async () => {
                console.log("SignalR connection closed. Attempting to restart...");
                await start();
            });
            start();
        });
    </script>
}